#Calcula el tiempo de vuelo total en minutos entre las columnas dep_time y arr_time que calculaste en el primer Ejercicio.
# Calcula la duración del vuelo en minutos
flights <- flights %>%
mutate(
flight_duration = as.numeric(difftime(arr_datetime, dep_datetime, units = "mins"))
)
# Ver los primeros resultados
head(flights[c("dep_datetime", "arr_datetime", "flight_duration")])
## Ejercicio 3: Extraer componentes de fechas
flights <- flights %>%
mutate(
dep_day_of_week = wday(dep_datetime, label = TRUE),  # Día de la semana (con etiqueta)
dep_hour = hour(dep_datetime)  # Hora de salida
)
# Ver los primeros resultados
head(flights[c("dep_datetime", "dep_day_of_week", "dep_hour")])
## Ejercicio 4: Crear nuevas columnas con el día de la semana y la semana del año
#Problema: Usando la columna `time_hour`, crea una nueva columna que indique el día de la semana y otra que indique la semana del año en la que ocurrió el vuelo.
#Ayuda: Invesitga la funcion wday de lubridate.
# Crear nuevas columnas para el día de la semana y la semana del año
flights <- flights %>%
mutate(
flight_day_of_week = wday(time_hour, label = TRUE),  # Día de la semana
flight_week_of_year = week(time_hour)  # Semana del año
)
# Ver los primeros resultados
head(flights[c("time_hour", "flight_day_of_week", "flight_week_of_year")])
## Ejercicio 5: Encontrar los vuelos que salieron los fines de semana
#Problema: Filtra los vuelos que despegaron un sábado o domingo y devuelve el total de vuelos en fines de semana.
Sys.setlocale("LC_TIME", "es_ES.UTF-8")
# Filtrar vuelos que salieron en sábado o domingo
weekend_flights <- flights %>%
filter(flight_day_of_week %in% c("sáb", "dom"))
# Contar el total de vuelos en fines de semana
total_weekend_flights <- nrow(weekend_flights)
# Mostrar el total de vuelos
total_weekend_flights
# Mostrar el total de vuelos
head(weekend_flights)
head(total_weekend_flights)
library(readr)
titanic <- read_csv("Lab9/titanic.csv")
View(titanic)
library(readr)
titanic_MD <- read_csv("Lab9/titanic_MD.csv")
View(titanic_MD)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(tidyverse)
library(mice)
library(Hmisc)
library(VIM)
library(caret)
titanic_md <- read.csv("titanic_MD.csv")
titanic <- read.csv("titanic.csv")
# NA por columna
na_suma <- data.frame(
n_suma = colSums(is.na(titanic_md)),
pct_suma = colSums(is.na(titanic_md))/nrow(titanic_md)*100
)
print(na_suma)
md.pattern(titanic_md)
md.pattern(titanic_md)
titanic_md <- read.csv("titanic_MD.csv")
titanic <- read.csv("titanic.csv")
titanic_md <- read.csv("titanic_MD.csv")
titanic <- read.csv("titanic.csv")
# NA por columna
na_suma <- data.frame(
n_suma = colSums(is.na(titanic_md)),
pct_suma = colSums(is.na(titanic_md))/nrow(titanic_md)*100
)
md.pattern(titanic_md)
titanic_md <- read.csv("titanic_MD.csv")
titanic <- read.csv("titanic.csv")
# NA por columna
na_suma <- data.frame(
n_suma = colSums(is.na(titanic_md)),
pct_suma = colSums(is.na(titanic_md))/nrow(titanic_md)*100
)
md.pattern(titanic_md)
library(readr)
titanic_MD <- read_csv("Lab9/titanic_MD.csv")
View(titanic_MD)
titanic_md <- read_csv("Lab9/titanic_MD.csv")
titanic <- read.csv("Lab9/titanic.csv")
# NA por columna
na_suma <- data.frame(
n_suma = colSums(is.na(titanic_md)),
pct_suma = colSums(is.na(titanic_md))/nrow(titanic_md)*100
)
md.pattern(titanic_md)
suppressPackageStartupMessages({
library(tidyverse)
library(mice)
library(Hmisc)
library(VIM)
library(caret)
})
titanic_md <- read_csv("Lab9/titanic_MD.csv")
titanic <- read.csv("Lab9/titanic.csv")
# NA por columna
na_suma <- data.frame(
n_suma = colSums(is.na(titanic_md)),
pct_suma = colSums(is.na(titanic_md))/nrow(titanic_md)*100
)
md.pattern(titanic_md)
# Comparar estadísticas de Age entre diferentes métodos y datos originales
age_comparison <- data.frame(
Original = mean(titanic_complete$Age),
General_Imputation = mean(titanic_imp_general$Age),
Regression_Imputation = mean(titanic_imp_regression$Age)
)
# Comparar estadísticas de Age entre diferentes métodos y datos originales
age_comparison <- data.frame(
Original = mean(titanic$Age),
General_Imputation = mean(titanic_imp_general$Age),
Regression_Imputation = mean(titanic_imp_regression$Age)
)
# Comparar estadísticas de Age entre diferentes métodos y datos originales
age_comparison <- data.frame(
Original = mean(titanic$Age),
General_Imputation = mean(titanic_imp_general$Age),
Regression_Imputation = mean(titanic_imp_regression$Age)
)
# Identificar filas completas
filas <- complete.cases(titanic_md)
cat("Número de filas completas:", sum(filas), "\n")
cat("Porcentaje de filas completas:", mean(filas)*100, "%\n")
# Función para imputación general
general_imputation <- function(data) {
data_imp <- data
# Age - Media
data_imp$Age[is.na(data_imp$Age)] <- mean(data_imp$Age, na.rm = TRUE)
# Cabin - Moda
most_frequent_cabin <- names(sort(table(data_imp$Cabin), decreasing = TRUE))[1]
data_imp$Cabin[is.na(data_imp$Cabin)] <- most_frequent_cabin
# Embarked - Moda
most_frequent_embarked <- names(sort(table(data_imp$Embarked), decreasing = TRUE))[1]
data_imp$Embarked[is.na(data_imp$Embarked)] <- most_frequent_embarked
return(data_imp)
}
titanic_imp_general <- general_imputation(titanic_md)
# Imputación por regresión para Age
age_model <- lm(Age ~ Pclass + Sex + SibSp + Parch + Fare,
data = titanic_md[!is.na(titanic_md$Age),])
titanic_imp_regression <- titanic_md
missing_age <- is.na(titanic_imp_regression$Age)
titanic_imp_regression$Age[missing_age] <- predict(age_model,
newdata = titanic_imp_regression[missing_age,])
# Standard deviation approach para Age
detect_outliers_sd <- function(x, n_sd = 3) {
mean_x <- mean(x, na.rm = TRUE)
sd_x <- sd(x, na.rm = TRUE)
outliers <- x < (mean_x - n_sd * sd_x) | x > (mean_x + n_sd * sd_x)
return(outliers)
}
# Detectar y tratar outliers en Age
age_outliers <- detect_outliers_sd(titanic_md$Age[!is.na(titanic_md$Age)])
# Comparar estadísticas de Age entre diferentes métodos y datos originales
age_comparison <- data.frame(
Original = mean(titanic$Age),
General_Imputation = mean(titanic_imp_general$Age),
Regression_Imputation = mean(titanic_imp_regression$Age)
)
print(age_comparison)
# Seleccionar columnas numéricas
numeric_cols <- c("Age", "Fare")
# Standardization
standardize <- function(x) {
return((x - mean(x)) / sd(x))
}
# MinMaxScaling
minmax_scale <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# MaxAbsScaler
maxabs_scale <- function(x) {
return(x / max(abs(x)))
}
# Aplicar normalizaciones
titanic_standardized <- titanic_imp_regression
titanic_minmax <- titanic_imp_regression
titanic_maxabs <- titanic_imp_regression
for(col in numeric_cols) {
titanic_standardized[[col]] <- standardize(titanic_imp_regression[[col]])
titanic_minmax[[col]] <- minmax_scale(titanic_imp_regression[[col]])
titanic_maxabs[[col]] <- maxabs_scale(titanic_imp_regression[[col]])
}
# Función para calcular estadísticos importantes
get_statistics <- function(data, col) {
return(c(
mean = mean(data[[col]]),
sd = sd(data[[col]]),
min = min(data[[col]]),
max = max(data[[col]]),
median = median(data[[col]])
))
}
# Comparar estadísticos para Age
age_stats <- data.frame(
Original = get_statistics(titanic_complete, "Age"),
Standardized = get_statistics(titanic_standardized, "Age"),
MinMax = get_statistics(titanic_minmax, "Age"),
MaxAbs = get_statistics(titanic_maxabs, "Age")
)
# Función para calcular estadísticos importantes
get_statistics <- function(data, col) {
return(c(
mean = mean(data[[col]]),
sd = sd(data[[col]]),
min = min(data[[col]]),
max = max(data[[col]]),
median = median(data[[col]])
))
}
# Comparar estadísticos para Age
age_stats <- data.frame(
Original = get_statistics(titanic, "Age"),
Standardized = get_statistics(titanic_standardized, "Age"),
MinMax = get_statistics(titanic_minmax, "Age"),
MaxAbs = get_statistics(titanic_maxabs, "Age")
)
print(age_stats)
suppressPackageStartupMessages({
library(tidyverse)
library(mice)
library(Hmisc)
library(VIM)
library(caret)
})
general_imputation <- function(data) {
data_imp <- data
# Edad
data_imp$Age[is.na(data_imp$Age)] <- mean(data_imp$Age, na.rm = TRUE)
# Cabina
most_frequent_cabin <- names(sort(table(data_imp$Cabin), decreasing = TRUE))[1]
data_imp$Cabin[is.na(data_imp$Cabin)] <- most_frequent_cabin
# Embarcación
most_frequent_embarked <- names(sort(table(data_imp$Embarked), decreasing = TRUE))[1]
data_imp$Embarked[is.na(data_imp$Embarked)] <- most_frequent_embarked
return(data_imp)
}
titanic_imp_general <- general_imputation(titanic_md)
# Columnas numéricas
numeric_cols <- c("Age", "Fare")
# estandarización
estandarizacion <- function(x) {
return((x - mean(x)) / sd(x))
}
# MinMaxScaling
minmax_scaling <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# MaxAbsScaler
maxabs_scaling <- function(x) {
return(x / max(abs(x)))
}
# Aplicar normalizaciones
titanic_standardized <- titanic_imp_regression
titanic_minmax <- titanic_imp_regression
titanic_maxabs <- titanic_imp_regression
for(col in numeric_cols) {
titanic_standardized[[col]] <- standardize(titanic_imp_regression[[col]])
titanic_minmax[[col]] <- minmax_scale(titanic_imp_regression[[col]])
titanic_maxabs[[col]] <- maxabs_scale(titanic_imp_regression[[col]])
}
get_statistics <- function(data, col) {
return(c(
mean = mean(data[[col]]),
sd = sd(data[[col]]),
min = min(data[[col]]),
max = max(data[[col]]),
median = median(data[[col]])
))
}
# Comparar estadísticos para Age
age_stats <- data.frame(
Original = get_statistics(titanic, "Age"),
Standardized = get_statistics(titanic_standardized, "Age"),
MinMax = get_statistics(titanic_minmax, "Age"),
MaxAbs = get_statistics(titanic_maxabs, "Age")
)
print(age_stats)
# Columnas numéricas
numeric_cols <- c("Age", "Fare")
# estandarización
standardize() <- function(x) {
return((x - mean(x)) / sd(x))
}
# Columnas numéricas
numeric_cols <- c("Age", "Fare")
# estandarización
standardize() <- function(x) {
return((x - mean(x)) / sd(x))
}
# Columnas numéricas
numeric_cols <- c("Age", "Fare")
# estandarizacion
standardize() <- function(x) {
return((x - mean(x)) / sd(x))
}
# Columnas numéricas
numeric_cols <- c("Age", "Fare")
# estandarizacion
standardize() <- function(x) {
return((x - mean(x)) / sd(x))
}
# Columnas numéricas
numeric_cols <- c("Age", "Fare")
# estandarizacion
standardize <- function(x) {
return((x - mean(x)) / sd(x))
}
# MinMaxScaling
minmax_scaling <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# MaxAbsScaler
maxabs_scaling <- function(x) {
return(x / max(abs(x)))
}
titanic_standardized <- titanic_imp_regression
titanic_minmax <- titanic_imp_regression
titanic_maxabs <- titanic_imp_regression
for(col in numeric_cols) {
titanic_standardized[[col]] <- standardize(titanic_imp_regression[[col]])
titanic_minmax[[col]] <- minmax_scale(titanic_imp_regression[[col]])
titanic_maxabs[[col]] <- maxabs_scale(titanic_imp_regression[[col]])
}
# Columnas numéricas
numeric_cols <- c("Age", "Fare")
# estandarizacion
standardize <- function(x) {
return((x - mean(x)) / sd(x))
}
# MinMaxScaling
minmax_scaling <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# MaxAbsScaler
maxabs_scaling <- function(x) {
return(x / max(abs(x)))
}
titanic_standardized <- titanic_imp_regression
titanic_minmax <- titanic_imp_regression
titanic_maxabs <- titanic_imp_regression
for(col in numeric_cols) {
titanic_standardized[[col]] <- standardize(titanic_imp_regression[[col]])
titanic_minmax[[col]] <- minmax_scale(titanic_imp_regression[[col]])
titanic_maxabs[[col]] <- maxabs_scale(titanic_imp_regression[[col]])
}
get_statistics <- function(data, col) {
return(c(
mean = mean(data[[col]]),
sd = sd(data[[col]]),
min = min(data[[col]]),
max = max(data[[col]]),
median = median(data[[col]])
))
}
age_stats <- data.frame(
Original = get_statistics(titanic, "Age"),
Standardized = get_statistics(titanic_standardized, "Age"),
MinMax = get_statistics(titanic_minmax, "Age"),
MaxAbs = get_statistics(titanic_maxabs, "Age")
)
print(age_stats)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(tidyverse)
library(mice)
library(Hmisc)
library(VIM)
library(caret)
})
titanic_md <- read_csv("Lab9/titanic_MD.csv")
titanic <- read.csv("Lab9/titanic.csv")
# NA por columna
na_suma <- data.frame(
n_suma = colSums(is.na(titanic_md)),
pct_suma = colSums(is.na(titanic_md))/nrow(titanic_md)*100
)
md.pattern(titanic_md)
# Identificar filas completas
filas <- complete.cases(titanic_md)
cat("Número de filas completas:", sum(filas), "\n")
cat("Porcentaje de filas completas:", mean(filas)*100, "%\n")
general_imputation <- function(data) {
data_imp <- data
# Edad
data_imp$Age[is.na(data_imp$Age)] <- mean(data_imp$Age, na.rm = TRUE)
# Cabina
most_frequent_cabin <- names(sort(table(data_imp$Cabin), decreasing = TRUE))[1]
data_imp$Cabin[is.na(data_imp$Cabin)] <- most_frequent_cabin
# Embarcación
most_frequent_embarked <- names(sort(table(data_imp$Embarked), decreasing = TRUE))[1]
data_imp$Embarked[is.na(data_imp$Embarked)] <- most_frequent_embarked
return(data_imp)
}
titanic_imp_general <- general_imputation(titanic_md)
age_model <- lm(Age ~ Pclass + Sex + SibSp + Parch + Fare,
data = titanic_md[!is.na(titanic_md$Age),])
titanic_imp_regression <- titanic_md
missing_age <- is.na(titanic_imp_regression$Age)
titanic_imp_regression$Age[missing_age] <- predict(age_model,
newdata = titanic_imp_regression[missing_age,])
# Standard deviation approach para Age
detect_outliers_sd <- function(x, n_sd = 3) {
mean_x <- mean(x, na.rm = TRUE)
sd_x <- sd(x, na.rm = TRUE)
outliers <- x < (mean_x - n_sd * sd_x) | x > (mean_x + n_sd * sd_x)
return(outliers)
}
age_outliers <- detect_outliers_sd(titanic_md$Age[!is.na(titanic_md$Age)])
detect_outliers_sd <- function(x, n_sd = 3) {
mean_x <- mean(x, na.rm = TRUE)
sd_x <- sd(x, na.rm = TRUE)
outliers <- x < (mean_x - n_sd * sd_x) | x > (mean_x + n_sd * sd_x)
return(outliers)
}
age_outliers <- detect_outliers_sd(titanic_md$Age[!is.na(titanic_md$Age)])
age_comparison <- data.frame(
Original = mean(titanic$Age),
General_Imputation = mean(titanic_imp_general$Age),
Regression_Imputation = mean(titanic_imp_regression$Age)
)
print(age_comparison)
# Columnas numéricas
numeric_cols <- c("Age", "Fare")
# estandarizacion
standardize <- function(x) {
return((x - mean(x)) / sd(x))
}
# MinMaxScaling
minmax_scaling <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# MaxAbsScaler
maxabs_scaling <- function(x) {
return(x / max(abs(x)))
}
titanic_standardized <- titanic_imp_regression
titanic_minmax <- titanic_imp_regression
titanic_maxabs <- titanic_imp_regression
for(col in numeric_cols) {
titanic_standardized[[col]] <- standardize(titanic_imp_regression[[col]])
titanic_minmax[[col]] <- minmax_scale(titanic_imp_regression[[col]])
titanic_maxabs[[col]] <- maxabs_scale(titanic_imp_regression[[col]])
}
get_statistics <- function(data, col) {
return(c(
mean = mean(data[[col]]),
sd = sd(data[[col]]),
min = min(data[[col]]),
max = max(data[[col]]),
median = median(data[[col]])
))
}
age_stats <- data.frame(
Original = get_statistics(titanic, "Age"),
Standardized = get_statistics(titanic_standardized, "Age"),
MinMax = get_statistics(titanic_minmax, "Age"),
MaxAbs = get_statistics(titanic_maxabs, "Age")
)
print(age_stats)
knitr::opts_chunk$set(echo = TRUE)
# Columnas numéricas
numeric_cols <- c("Age", "Fare")
# estandarizacion
standardize <- function(x) {
return((x - mean(x)) / sd(x))
}
# MinMaxScaling
minmax_scaling <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# MaxAbsScaler
maxabs_scaling <- function(x) {
return(x / max(abs(x)))
}
titanic_standardized <- titanic_imp_regression
titanic_minmax <- titanic_imp_regression
titanic_maxabs <- titanic_imp_regression
for(col in numeric_cols) {
titanic_standardized[[col]] <- standardize(titanic_imp_regression[[col]])
titanic_minmax[[col]] <- minmax_scale(titanic_imp_regression[[col]])
titanic_maxabs[[col]] <- maxabs_scale(titanic_imp_regression[[col]])
}
# Columnas numéricas
numeric_cols <- c("Age", "Fare")
# estandarizacion
standardize <- function(x) {
return((x - mean(x)) / sd(x))
}
# MinMaxScaling
minmax_scaling <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# MaxAbsScaler
maxabs_scaling <- function(x) {
return(x / max(abs(x)))
}
titanic_standardized <- titanic_imp_regression
titanic_minmax <- titanic_imp_regression
titanic_maxabs <- titanic_imp_regression
for(col in numeric_cols) {
titanic_standardized[[col]] <- standardize(titanic_imp_regression[[col]])
titanic_minmax[[col]] <- minmax_scaling(titanic_imp_regression[[col]])
titanic_maxabs[[col]] <- maxabs_scaling(titanic_imp_regression[[col]])
}
