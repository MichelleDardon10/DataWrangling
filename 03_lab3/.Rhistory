# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID, first name, and last name
group_by(id) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = names(which.max(table(genre)))               # Most common genre directed
)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID, first name, and last name
group_by(id, first_name, last_name) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID, first name, and last name
group_by(id) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID, first name, and last name
group_by(id,first_name,last_name) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
rlang::last_trace()
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID, first name, and last name
group_by(last_name) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
library(readr)
library(dplyr)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID, first name, and last name
group_by(last_name) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
library(readr)
actors <- read_csv("actors.csv")
#View(actors)
roles <- read_csv("roles.csv")
#View(roles)
movies <- read_csv("movies.csv")
#View(movies)
movies_genres <- read_csv("movies_genres.csv")
#View(movies_genres)
movies_directors <- read_csv("movies_directors.csv")
#View(movies_directors)
directors <- read_csv("directors.csv")
#View(directors)
directors_genres <- read_csv("directors_genres.csv")
#View(directors_genres)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID, first name, and last name
group_by(last_name) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID, first name, and last name
group_by(id,first_name,last_name) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
names(directors)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID, first name, and last name
group_by(id, first_name, last_name) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Select the columns you want to keep, ensuring first_name and last_name are retained
select(id, first_name, last_name, movie_id) %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID, first name, and last name
group_by(id, first_name, last_name) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Select the columns you want to keep, ensuring first_name and last_name are retained
select(id, first_name, last_name, movie_id) %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID, first name, and last name
group_by(id, first_name, last_name) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID (id) and use first() to ensure first_name and last_name are preserved
group_by(id) %>%
summarise(
first_name = first(first_name),    # Take the first occurrence of first_name
last_name = first(last_name),      # Take the first occurrence of last_name
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID (id) and use first() to ensure first_name and last_name are preserved
group_by(id) %>%
summarise(
first_name = first(first_name),    # Take the first occurrence of first_name
last_name = first(last_name),      # Take the first occurrence of last_name
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director and preserve first_name and last_name
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Select to ensure first_name and last_name are kept after the join
select(id, first_name, last_name, movie_id) %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID, first name, and last name
group_by(id, first_name, last_name) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID only
group_by(id) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = ifelse(length(unique(genre)) > 0,            # Handle missing genres
names(which.max(table(genre))),
NA_character_)                       # Return NA if no genres are found
)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID only
group_by(id) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = if (any(!is.na(genre))) {                    # Check if there are any non-missing genres
names(which.max(table(genre)))                            # Calculate the most common genre
} else {
NA_character_                                             # Return NA if no genres are found
}
)
# Display the result
print(director_report)
View(director_report)
View(directors)
# Reporte de directores
director_report <- directors %>%
# Join with movies_directors to get movie IDs for each director
left_join(movies_directors, by = c("id" = "director_id"), relationship = "many-to-many") %>%
# Join with roles and actors to count the number of actors each director has worked with
left_join(roles, by = "movie_id", relationship = "many-to-many") %>%
left_join(actors, by = c("actor_id" = "id")) %>%
# Join with movies_genres to get genre information
left_join(movies_genres, by = "movie_id", relationship = "many-to-many") %>%
# Group by director ID only
group_by(id,first_name,last_name) %>%
# Summarize the required fields
summarise(
num_movies = n_distinct(movie_id),                          # Number of unique movies directed
num_actors = n_distinct(actor_id),                          # Number of unique actors worked with
common_genre = if (any(!is.na(genre))) {                    # Check if there are any non-missing genres
names(which.max(table(genre)))                            # Calculate the most common genre
} else {
NA_character_                                             # Return NA if no genres are found
}
)
# Join the necessary datasets
role_distribution <- roles %>%
# Join with movies to get movie titles
left_join(movies, by = c("movie_id" = "id")) %>%
# Join with movies_directors to get director information
left_join(movies_directors, by = "movie_id") %>%
# Join with directors to get director names
left_join(directors, by = c("director_id" = "id")) %>%
# Group by movie and director
group_by(title, first_name, last_name) %>%
# Summarize the distribution of roles
summarise(
num_roles = n(),                        # Number of roles
num_unique_roles = n_distinct(roles)    # Number of unique roles
) %>%
# Arrange the result by number of roles
arrange(desc(num_roles))
View(director_report)
# Join the necessary datasets
role_distribution <- roles %>%
# Join with movies to get movie titles
left_join(movies, by = c("movie_id" = "id"), relationship = "many-to-many") %>%
# Join with movies_directors to get director information
left_join(movies_directors, by = "movie_id", relationship = "many-to-many") %>%
# Join with directors to get director names
left_join(directors, by = c("director_id" = "id"), relationship = "many-to-many") %>%
# Group by movie and director
group_by(title, first_name, last_name) %>%
# Summarize the distribution of roles
summarise(
num_roles = n(),                        # Number of roles
num_unique_roles = n_distinct(roles)    # Number of unique roles
) %>%
# Arrange the result by number of roles
arrange(desc(num_roles))
View(movies)
# Join the necessary datasets
role_distribution <- roles %>%
# Join with movies to get movie titles
left_join(movies, by = c("movie_id" = "id"), relationship = "many-to-many") %>%
# Join with movies_directors to get director information
left_join(movies_directors, by = "movie_id", relationship = "many-to-many") %>%
# Join with directors to get director names
left_join(directors, by = c("director_id" = "id"), relationship = "many-to-many") %>%
# Group by movie and director
group_by(name, first_name, last_name) %>%
# Summarize the distribution of roles
summarise(
num_roles = n(),                        # Number of roles
num_unique_roles = n_distinct(roles)    # Number of unique roles
) %>%
# Arrange the result by number of roles
arrange(desc(num_roles))
role_distribution <- roles %>%
left_join(movies, by = c("movie_id" = "id"), relationship = "many-to-many") %>%
left_join(movies_directors, by = "movie_id", relationship = "many-to-many") %>%
left_join(directors, by = c("director_id" = "id"), relationship = "many-to-many") %>%
group_by(name, first_name, last_name) %>%
summarise(
num_roles = n(),
num_unique_roles = n_distinct(roles)
) %>%
# Arrange the result by number of roles
arrange(desc(num_roles))
role_distribution <- roles %>%
left_join(movies, by = c("movie_id" = "id"), relationship = "many-to-many") %>%
left_join(movies_directors, by = "movie_id", relationship = "many-to-many") %>%
left_join(directors, by = c("director_id" = "id"), relationship = "many-to-many") %>%
group_by(name, first_name, last_name) %>%
summarise(
num_roles = n(),
num_unique_roles = n_distinct(roles)
) %>%
# Arrange the result by number of roles
arrange(desc(num_roles))
role_distribution <- roles %>%
left_join(movies, by = c("movie_id" = "id"), relationship = "many-to-many") %>%
left_join(movies_directors, by = "movie_id", relationship = "many-to-many") %>%
left_join(directors, by = c("director_id" = "id"), relationship = "many-to-many") %>%
group_by(name, first_name, last_name) %>%
summarise(
num_roles = n(),
num_unique_roles = n_distinct(roles)
) %>%
# Arrange the result by number of roles
arrange(desc(num_roles))
role_distribution <- roles %>%
left_join(movies, by = c("movie_id" = "id"), relationship = "many-to-many") %>%
left_join(movies_directors, by = "movie_id", relationship = "many-to-many") %>%
left_join(directors, by = c("director_id" = "id"), relationship = "many-to-many") %>%
group_by(name, first_name, last_name) %>%
summarise(
num_roles = n(),
num_unique_roles = n_distinct(roles)
) %>%
# Arrange the result by number of roles
arrange(desc(num_roles))
role_distribution <- roles %>%
left_join(movies, by = c("movie_id" = "id"), relationship = "many-to-many") %>%
left_join(movies_directors, by = "movie_id", relationship = "many-to-many") %>%
left_join(directors, by = c("director_id" = "id"), relationship = "many-to-many") %>%
group_by(name, first_name, last_name) %>%
summarise(
num_roles = n(),
num_unique_roles = n_distinct(roles)
) %>%
# Arrange the result by number of roles
arrange(desc(num_roles))
# Load the libraries
library(readr)
library(dplyr)
actors <- read_csv("actors.csv")
#View(actors)
roles <- read_csv("roles.csv")
#View(roles)
movies <- read_csv("movies.csv")
#View(movies)
movies_genres <- read_csv("movies_genres.csv")
#View(movies_genres)
movies_directors <- read_csv("movies_directors.csv")
#View(movies_directors)
directors <- read_csv("directors.csv")
#View(directors)
directors_genres <- read_csv("directors_genres.csv")
#View(directors_genres)
role_distribution <- roles %>%
left_join(movies, by = c("movie_id" = "id"), relationship = "many-to-many") %>%
left_join(movies_directors, by = "movie_id", relationship = "many-to-many") %>%
left_join(directors, by = c("director_id" = "id"), relationship = "many-to-many") %>%
group_by(name, first_name, last_name) %>%
summarise(
num_roles = n(),
num_unique_roles = n_distinct(roles)
) %>%
# Arrange the result by number of roles
arrange(desc(num_roles))
# Load the libraries
library(readr)
library(dplyr)
actors <- read_csv("actors.csv")
#View(actors)
roles <- read_csv("roles.csv")
#View(roles)
movies <- read_csv("movies.csv")
#View(movies)
movies_genres <- read_csv("movies_genres.csv")
#View(movies_genres)
movies_directors <- read_csv("movies_directors.csv")
#View(movies_directors)
directors <- read_csv("directors.csv")
#View(directors)
directors_genres <- read_csv("directors_genres.csv")
#View(directors_genres)
role_distribution <- roles %>%
left_join(movies, by = c("movie_id" = "id"), relationship = "many-to-many") %>%
left_join(movies_directors, by = "movie_id", relationship = "many-to-many") %>%
left_join(directors, by = c("director_id" = "id"), relationship = "many-to-many") %>%
group_by(name, first_name, last_name) %>%
summarise(
num_roles = n(),
num_unique_roles = n_distinct(roles)
) %>%
# Arrange the result by number of roles
arrange(desc(num_roles))
